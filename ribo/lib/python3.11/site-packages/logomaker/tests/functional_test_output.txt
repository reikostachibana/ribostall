Testing Logo() parameter df ...
Test # 0: Expected error: out_df needs to be a valid pandas out_df, out_df entered: <class 'list'>
Test # 1: Expected error: out_df needs to be a valid pandas out_df, out_df entered: <class 'str'>
Test # 2: Expected success.
Test # 3: Expected success.
Tests passed: 4. Tests failed: 0.

Testing Logo() parameter color_scheme ...
Test # 4: Expected error: invalid choice: color_scheme=x
Test # 5: Expected error: invalid choice: color_scheme=bad_color_name
Test # 6: Expected error: Error: color_scheme has invalid type <class 'int'>
Test # 7: Expected success.
Test # 8: Expected success.
Test # 9: Expected success.
Test # 10: Expected success.
Tests passed: 11. Tests failed: 0.

Testing Logo() parameter font_name ...
Test # 11: Expected error: type(font_name) = <class 'bool'> must be of type str
Test # 12: Expected error: type(font_name) = <class 'NoneType'> must be of type str
Test # 13: Expected error: type(font_name) = <class 'pandas.core.frame.DataFrame'> must be of type str
Test # 14: Expected success.
Test # 15: Expected success.
Test # 16: Expected success.
Tests passed: 17. Tests failed: 0.

Testing Logo() parameter stack_order ...
Test # 17: Expected error: stack_order = incorrect argument; must be in {'big_on_top', 'small_on_top', 'fixed'}.
Test # 18: Expected error: stack_order = 0.0; must be in {'big_on_top', 'small_on_top', 'fixed'}.
Test # 19: Expected error: stack_order = None; must be in {'big_on_top', 'small_on_top', 'fixed'}.
Test # 20: Expected success.
Test # 21: Expected success.
Test # 22: Expected success.
Tests passed: 23. Tests failed: 0.

Testing Logo() parameter center_values ...
Test # 23: Expected error: type(center_values) = <class 'str'>; must be of type bool.
Test # 24: Expected error: type(center_values) = <class 'float'>; must be of type bool.
Test # 25: Expected error: type(center_values) = <class 'NoneType'>; must be of type bool.
Test # 26: Expected success.
Test # 27: Expected success.
Tests passed: 28. Tests failed: 0.

Testing Logo() parameter baseline_width ...
Test # 28: Expected error: type(baseline_width) = <class 'str'> must be of type number
Test # 29: Expected error: baseline_width = -0.1 must be >= 0.0
Test # 30: Expected error: type(baseline_width) = <class 'NoneType'> must be of type number
Test # 31: Expected success.
Test # 32: Expected success.
Test # 33: Expected success.
Tests passed: 34. Tests failed: 0.

Testing Logo() parameter flip_below ...
Test # 34: Expected error: type(flip_below) = <class 'str'>; must be of type bool 
Test # 35: Expected error: type(flip_below) = <class 'float'>; must be of type bool 
Test # 36: Expected error: type(flip_below) = <class 'NoneType'>; must be of type bool 
Test # 37: Expected success.
Test # 38: Expected success.
Tests passed: 39. Tests failed: 0.

Testing Logo() parameter shade_below ...
Test # 39: Expected error: type(shade_below) = <class 'str'> must be of type float
Test # 40: Expected error: shade_below must be between 0 and 1
Test # 41: Expected error: shade_below must be between 0 and 1
Test # 42: Expected error: type(shade_below) = <class 'NoneType'> must be of type float
Test # 43: Expected success.
Test # 44: Expected success.
Test # 45: Expected success.
Test # 46: Expected success.
Test # 47: Expected success.
Tests passed: 48. Tests failed: 0.

Testing Logo() parameter fade_below ...
Test # 48: Expected error: type(fade_below) = <class 'str'> must be of type float
Test # 49: Expected error: fade_below must be between 0 and 1
Test # 50: Expected error: fade_below must be between 0 and 1
Test # 51: Expected error: type(fade_below) = <class 'NoneType'> must be of type float
Test # 52: Expected success.
Test # 53: Expected success.
Test # 54: Expected success.
Test # 55: Expected success.
Test # 56: Expected success.
Tests passed: 57. Tests failed: 0.

Testing Logo() parameter fade_probabilities ...
Test # 57: Expected error: type(fade_probabilities) = <class 'str'>; must be of type bool 
Test # 58: Expected error: type(fade_probabilities) = <class 'float'>; must be of type bool 
Test # 59: Expected error: type(fade_probabilities) = <class 'float'>; must be of type bool 
Test # 60: Expected error: type(fade_probabilities) = <class 'NoneType'>; must be of type bool 
Test # 61: Expected success.
Test # 62: Expected success.
Tests passed: 63. Tests failed: 0.

Testing Logo() parameter vsep ...
Test # 63: Expected error: type(vsep) = <class 'str'>; must be of type float or int 
Test # 64: Expected error: vsep = 0 must be greater than 0 
Test # 65: Expected error: type(vsep) = <class 'NoneType'>; must be of type float or int 
Test # 66: Expected success.
Test # 67: Expected success.
Test # 68: Expected success.
Test # 69: Expected success.
Tests passed: 70. Tests failed: 0.

Testing Logo() parameter show_spines ...
Test # 70: Expected error: show_spines = 'incorrect argument'; show_spines must be None or boolean.
Test # 71: Expected error: show_spines = -0.1; show_spines must be None or boolean.
Test # 72: Expected success.
Test # 73: Expected success.
Test # 74: Expected success.
Tests passed: 75. Tests failed: 0.

Testing Logo() parameter zorder ...
Test # 75: Expected error: type(zorder) = <class 'str'>; zorder must be a number.
Test # 76: Expected success.
Test # 77: Expected success.
Test # 78: Expected success.
Tests passed: 79. Tests failed: 0.

Testing Logo() parameter figsize ...
Test # 79: Expected error: type(figsize) = <class 'str'>; figsize must be array-like.
Test # 80: Expected error: type(figsize) = <class 'float'>; figsize must be array-like.
Test # 81: Expected error: all elements of figsize array must be numbers > 0.
Test # 82: Expected error: figsize must have length two.
Test # 83: Expected error: all elements of figsize array must be numbers > 0.
Test # 84: Expected error: all elements of figsize array must be numbers > 0.
Test # 85: Expected error: figsize must have length two.
Test # 86: Expected success.
Test # 87: Expected success.
Tests passed: 88. Tests failed: 0.

Testing Logo() parameter ax ...
Test # 88: Expected error: ax = 'x'; ax must be None or a matplotlib.Axes object.
Test # 89: Expected error: ax = 1; ax must be None or a matplotlib.Axes object.
Test # 90: Expected error: ax = True; ax must be None or a matplotlib.Axes object.
Test # 91: Expected success.
Test # 92: Expected success.
Tests passed: 93. Tests failed: 0.

Testing style_glyphs() parameter color_scheme ...
Test # 93: Expected error: invalid choice: color_scheme=bad_color_scheme
Test # 94: Expected error: Error: color_scheme has invalid type <class 'int'>
Test # 95: Expected error: Error: color_scheme has invalid type <class 'bool'>
Test # 96: Expected success.
Test # 97: Expected success.
Test # 98: Expected success.
Tests passed: 99. Tests failed: 0.

Testing fade_glyphs_in_probability_logo() parameter v_alpha0 ...
Test # 99: Expected error: v_alpha0 must be between 0 and 1; value is -1.000000.
Test # 100: Expected error: v_alpha0 must be between 0 and 1; value is 1.100000.
Test # 101: Expected error: must have v_alpha0 < v_alpha1;here, v_alpha0 = 1.000000 and v_alpha1 = 1.000000
Test # 102: Expected error: must have v_alpha0 < v_alpha1;here, v_alpha0 = 1.000000 and v_alpha1 = 1.000000
Test # 103: Expected error: type(v_alpha0) = <class 'str'> must be a number
Test # 104: Expected error: must have v_alpha0 < v_alpha1;here, v_alpha0 = 1.000000 and v_alpha1 = 1.000000
Test # 105: Expected success.
Test # 106: Expected success.
Test # 107: Expected success.
Test # 108: Expected success.
Tests passed: 109. Tests failed: 0.

Testing fade_glyphs_in_probability_logo() parameter v_alpha1 ...
Test # 109: Expected error: v_alpha1 must be between 0 and 1; value is 1.100000
Test # 110: Expected error: v_alpha1 must be between 0 and 1; value is -1.000000
Test # 111: Expected error: type(v_alpha1) = <class 'str'> must be a number
Test # 112: Expected success.
Test # 113: Expected success.
Test # 114: Expected success.
Tests passed: 115. Tests failed: 0.

Testing style_glyphs_below() parameter color ...
Test # 115: Expected error: type(color_spec) = <class 'int'> is invalid.
Test # 116: Expected error: invalid choice: color_spec=xxx
Test # 117: Expected error: type(color_spec) = <class 'bool'> is invalid.
Test # 118: Expected error: Values of color_spec must be between 0 and 1 inclusive.
Test # 119: Expected success.
Test # 120: Expected success.
Test # 121: Expected success.
Test # 122: Expected success.
Test # 123: Expected success.
Tests passed: 124. Tests failed: 0.

Testing style_glyphs_below() parameter alpha ...
Test # 124: Expected error: alpha must be between 0.0 and 1.0 (inclusive)
Test # 125: Expected error: type(alpha) = <class 'str'> must be a float or int
Test # 126: Expected error: alpha must be between 0.0 and 1.0 (inclusive)
Test # 127: Expected success.
Test # 128: Expected success.
Test # 129: Expected success.
Tests passed: 130. Tests failed: 0.

Testing style_glyphs_below() parameter shade ...
Test # 130: Expected error: shade must be between 0 and 1; value is -1.000000.
Test # 131: Expected error: type(shade) = <class 'str'> must be a number
Test # 132: Expected error: shade must be between 0 and 1; value is 1.100000.
Test # 133: Expected success.
Test # 134: Expected success.
Test # 135: Expected success.
Tests passed: 136. Tests failed: 0.

Testing style_glyphs_below() parameter fade ...
Test # 136: Expected error: fade must be between 0 and 1; value is -1.000000
Test # 137: Expected error: type(fade) = <class 'str'> must be a number
Test # 138: Expected error: fade must be between 0 and 1; value is 1.100000
Test # 139: Expected success.
Test # 140: Expected success.
Test # 141: Expected success.
Tests passed: 142. Tests failed: 0.

Testing style_glyphs_below() parameter flip ...
Test # 142: Expected error: type(flip) = <class 'int'>; must be of type bool 
Test # 143: Expected error: type(flip) = <class 'int'>; must be of type bool 
Test # 144: Expected error: type(flip) = <class 'str'>; must be of type bool 
Test # 145: Expected error: type(flip) = <class 'str'>; must be of type bool 
Test # 146: Expected error: type(flip) = <class 'int'>; must be of type bool 
Test # 147: Expected success.
Test # 148: Expected success.
Tests passed: 149. Tests failed: 0.

Testing style_single_glyph() parameter p ...
Test # 149: Expected error: p=-1 is not a valid position
Test # 150: Expected error: type(p) = <class 'str'> must be of type int or numpy.int64
Test # 151: Expected error: type(p) = <class 'float'> must be of type int or numpy.int64
Test # 152: Expected error: p=10000 is not a valid position
Test # 153: Expected success.
Test # 154: Expected success.
Test # 155: Expected success.
Tests passed: 156. Tests failed: 0.

Testing style_single_glyph() parameter c ...
Test # 156: Expected error: type(c) = <class 'int'> must be of type str
Test # 157: Expected error: c=x is not a valid character
Test # 158: Expected error: type(c) = <class 'float'> must be of type str
Test # 159: Expected success.
Test # 160: Expected success.
Test # 161: Expected success.
Test # 162: Expected success.
Tests passed: 163. Tests failed: 0.

Testing style_glyphs_in_sequence() parameter sequence ...
Test # 163: Expected error: type(sequence) = <class 'int'> must be of type str
Test # 164: Expected error: sequence to restyle (length 1) must have same length as logo (length 26).
Test # 165: Expected error: type(sequence) = <class 'float'> must be of type str
Test # 166: Expected error: sequence to restyle (length 10) must have same length as logo (length 26).
Test # 167: Expected success.
Tests passed: 168. Tests failed: 0.

Testing highlight_position() parameter p ...
Test # 168: Expected error: type(p) = <class 'str'> must be of type int
Test # 169: Expected error: type(p) = <class 'float'> must be of type int
Test # 170: Expected success.
Test # 171: Expected success.
Test # 172: Expected success.
Tests passed: 173. Tests failed: 0.

Testing highlight_position_range() parameter pmin ...
Test # 173: Expected error: type(pmin) = <class 'str'> must be a number
Test # 174: Expected error: pmin <= pmax not satisfied.
Test # 175: Expected success.
Test # 176: Expected success.
Test # 177: Expected success.
Tests passed: 178. Tests failed: 0.

Testing highlight_position_range() parameter pmax ...
Test # 178: Expected error: type(pmax) = <class 'str'> must be a number
Test # 179: Expected error: pmin <= pmax not satisfied.
Test # 180: Expected success.
Test # 181: Expected success.
Test # 182: Expected success.
Tests passed: 183. Tests failed: 0.

Testing highlight_position_range() parameter padding ...
Test # 183: Expected error: padding = 'x' must be a number >= -0.5
Test # 184: Expected error: padding = -1 must be a number >= -0.5
Test # 185: Expected success.
Test # 186: Expected success.
Test # 187: Expected success.
Tests passed: 188. Tests failed: 0.

Testing highlight_position_range() parameter color ...
Test # 188: Expected error: invalid choice: color_spec=x
Test # 189: Expected error: type(color_spec) = <class 'int'> is invalid.
Test # 190: Expected error: type(color_spec) = <class 'bool'> is invalid.
Test # 191: Expected error: invalid choice: color_spec=wrong_color
Test # 192: Expected success.
Test # 193: Expected success.
Test # 194: Expected success.
Tests passed: 195. Tests failed: 0.

Testing highlight_position_range() parameter edgecolor ...
Test # 195: Expected error: invalid choice: color_spec=x
Test # 196: Expected error: type(color_spec) = <class 'int'> is invalid.
Test # 197: Expected error: type(color_spec) = <class 'bool'> is invalid.
Test # 198: Expected error: invalid choice: color_spec=wrong_color
Test # 199: Expected success.
Test # 200: Expected success.
Test # 201: Expected success.
Test # 202: Expected success.
Tests passed: 203. Tests failed: 0.

Testing highlight_position_range() parameter floor ...
Test # 203: Expected error: type(floor) = <class 'str'> must be a number
Test # 204: Expected error: must have floor <= ceiling; as is, floor = 10.000000, ceiling = 1.1172839506172836
Test # 205: Expected success.
Test # 206: Expected success.
Test # 207: Expected success.
Tests passed: 208. Tests failed: 0.

Testing highlight_position_range() parameter ceiling ...
Test # 208: Expected error: type(ceiling) = <class 'str'> must be a number
Test # 209: Expected error: must have floor <= ceiling; as is, floor = -1.117284, ceiling = -10
Test # 210: Expected success.
Test # 211: Expected success.
Test # 212: Expected success.
Tests passed: 213. Tests failed: 0.

Testing highlight_position_range() parameter zorder ...
Test # 213: Expected error: type(zorder) = <class 'str'>; must a float or int.
Test # 214: Expected error: type(zorder) = <class 'NoneType'>; must a float or int.
Test # 215: Expected success.
Test # 216: Expected success.
Test # 217: Expected success.
Tests passed: 218. Tests failed: 0.

Testing draw_baseline() parameter zorder ...
Test # 218: Expected error: type(zorder) = <class 'str'>; must a float or int.
Test # 219: Expected error: type(zorder) = <class 'NoneType'>; must a float or int.
Test # 220: Expected success.
Test # 221: Expected success.
Test # 222: Expected success.
Tests passed: 223. Tests failed: 0.

Testing draw_baseline() parameter color ...
Test # 223: Expected error: invalid choice: color_spec=x
Test # 224: Expected error: type(color_spec) = <class 'int'> is invalid.
Test # 225: Expected error: type(color_spec) = <class 'bool'> is invalid.
Test # 226: Expected error: invalid choice: color_spec=wrong_color
Test # 227: Expected success.
Test # 228: Expected success.
Test # 229: Expected success.
Tests passed: 230. Tests failed: 0.

Testing draw_baseline() parameter linewidth ...
Test # 230: Expected error: type(linewidth) = <class 'str'>; must be a number 
Test # 231: Expected error: linewidth must be >= 0
Test # 232: Expected error: type(linewidth) = <class 'str'>; must be a number 
Test # 233: Expected error: type(linewidth) = <class 'NoneType'>; must be a number 
Test # 234: Expected success.
Test # 235: Expected success.
Test # 236: Expected success.
Test # 237: Expected success.
Tests passed: 238. Tests failed: 0.

Testing style_xticks() parameter anchor ...
Test # 238: Expected error: type(anchor) = <class 'str'> must be of type int
Test # 239: Expected error: type(anchor) = <class 'NoneType'> must be of type int
Test # 240: Expected error: type(anchor) = <class 'float'> must be of type int
Test # 241: Expected error: type(anchor) = <class 'float'> must be of type int
Test # 242: Expected success.
Test # 243: Expected success.
Test # 244: Expected success.
Tests passed: 245. Tests failed: 0.

Testing style_xticks() parameter spacing ...
Test # 245: Expected error: spacing = 'x' must be an int > 0
Test # 246: Expected error: spacing = None must be an int > 0
Test # 247: Expected error: spacing = 0 must be an int > 0
Test # 248: Expected error: spacing = 0.5 must be an int > 0
Test # 249: Expected success.
Test # 250: Expected success.
Tests passed: 251. Tests failed: 0.

Testing style_xticks() parameter fmt ...
Test # 251: Expected error: type(fmt) = <class 'NoneType'> must be of type str
Test # 252: Expected error: type(fmt) = <class 'int'> must be of type str
Test # 253: Expected success.
Tests passed: 254. Tests failed: 0.

Testing style_xticks() parameter rotation ...
Test # 254: Expected error: type(rotation) = <class 'NoneType'>; must be of type float or int 
Test # 255: Expected error: type(rotation) = <class 'str'>; must be of type float or int 
Test # 256: Expected success.
Test # 257: Expected success.
Test # 258: Expected success.
Test # 259: Expected success.
Tests passed: 260. Tests failed: 0.

Testing style_spines() parameter spines ...
Test # 260: Expected error: type(spines) = <class 'str'>; must be of type (tuple, list, set) 
Test # 261: Expected error: type(spines) = <class 'NoneType'>; must be of type (tuple, list, set) 
Test # 262: Expected error: type(spines) = <class 'float'>; must be of type (tuple, list, set) 
Test # 263: Expected error: type(spines) = <class 'float'>; must be of type (tuple, list, set) 
Test # 264: Expected error: type(spines) = <class 'str'>; must be of type (tuple, list, set) 
Test # 265: Expected success.
Test # 266: Expected success.
Test # 267: Expected success.
Test # 268: Expected success.
Test # 269: Expected success.
Tests passed: 270. Tests failed: 0.

Testing style_spines() parameter visible ...
Test # 270: Expected error: type(visible) = <class 'int'>; must be of type bool 
Test # 271: Expected error: type(visible) = <class 'int'>; must be of type bool 
Test # 272: Expected error: type(visible) = <class 'str'>; must be of type bool 
Test # 273: Expected error: type(visible) = <class 'str'>; must be of type bool 
Test # 274: Expected error: type(visible) = <class 'int'>; must be of type bool 
Test # 275: Expected success.
Test # 276: Expected success.
Tests passed: 277. Tests failed: 0.

Testing style_spines() parameter color ...
Test # 277: Expected error: invalid choice: color_spec=wrong_color
Test # 278: Expected error: type(color_spec) = <class 'int'> is invalid.
Test # 279: Expected error: color_scheme, if array, must be of length 3.
Test # 280: Expected success.
Test # 281: Expected success.
Test # 282: Expected success.
Tests passed: 283. Tests failed: 0.

Testing style_spines() parameter linewidth ...
Test # 283: Expected error: type(linewidth) = <class 'str'>; must be a number 
Test # 284: Expected error: linewidth must be >= 0
Test # 285: Expected success.
Test # 286: Expected success.
Test # 287: Expected success.
Tests passed: 288. Tests failed: 0.

Testing style_spines() parameter bounds ...
Test # 288: Expected error: type(bounds) = <class 'str'>; must be one of (<class 'list'>, <class 'tuple'>, <class 'numpy.ndarray'>)
Test # 289: Expected error: type(bounds) = <class 'int'>; must be one of (<class 'list'>, <class 'tuple'>, <class 'numpy.ndarray'>)
Test # 290: Expected success.
Test # 291: Expected success.
Tests passed: 292. Tests failed: 0.

Testing transform_matrix() parameter df ...
Test # 292: Expected error: out_df needs to be a valid pandas out_df, out_df entered: <class 'str'>
Test # 293: Expected error: Some data frame entries are negative.
Test # 294: Expected error: out_df needs to be a valid pandas out_df, out_df entered: <class 'NoneType'>
Test # 295: Expected success.
Tests passed: 296. Tests failed: 0.

Testing transform_matrix() parameter df ...
Test # 296: Expected success.
Tests passed: 297. Tests failed: 0.

Testing transform_matrix() parameter df ...
Test # 297: Expected success.
Tests passed: 298. Tests failed: 0.

Testing transform_matrix() parameter center_values ...
Test # 298: Expected error: type(center_values) = <class 'int'> must be of type bool
Test # 299: Expected error: type(center_values) = <class 'int'> must be of type bool
Test # 300: Expected error: type(center_values) = <class 'str'> must be of type bool
Test # 301: Expected error: type(center_values) = <class 'str'> must be of type bool
Test # 302: Expected error: type(center_values) = <class 'int'> must be of type bool
Test # 303: Expected success.
Test # 304: Expected success.
Tests passed: 305. Tests failed: 0.

Testing transform_matrix() parameter normalize_values ...
Test # 305: Expected error: type(normalize_values) = <class 'int'> must be of type bool
Test # 306: Expected error: type(normalize_values) = <class 'int'> must be of type bool
Test # 307: Expected error: type(normalize_values) = <class 'str'> must be of type bool
Test # 308: Expected error: type(normalize_values) = <class 'str'> must be of type bool
Test # 309: Expected error: type(normalize_values) = <class 'int'> must be of type bool
Test # 310: Expected success.
Test # 311: Expected success.
Tests passed: 312. Tests failed: 0.

Testing transform_matrix() parameter from_type ...
Test # 312: Expected error: from_type = 1 must be None or in {'probability', 'weight', 'counts', 'information'}
Test # 313: Expected error: from_type = x must be None or in {'probability', 'weight', 'counts', 'information'}
Test # 314: Expected error: Unless center_values is True or normalize_values is True,Neither from_type (=None) nor to_type (=probability) can be None.
Test # 315: Expected success.
Tests passed: 316. Tests failed: 0.

Testing transform_matrix() parameter to_type ...
Test # 316: Expected error: to_type = 1 must be None or in {'probability', 'weight', 'counts', 'information'}
Test # 317: Expected error: to_type = x must be None or in {'probability', 'weight', 'counts', 'information'}
Test # 318: Expected error: Unless center_values is True or normalize_values is True,Neither from_type (=counts) nor to_type (=None) can be None.
Test # 319: Expected success.
Test # 320: Expected success.
Test # 321: Expected success.
Tests passed: 322. Tests failed: 0.

Testing transform_matrix() parameter background ...
Test # 322: Expected error: type(background) = <class 'int'> must be None or array-like or a dataframe.
Test # 323: Expected error: type(background) = <class 'str'> must be None or array-like or a dataframe.
Test # 324: Expected error: Some data frame entries are negative.
Test # 325: Expected success.
Test # 326: Expected success.
Tests passed: 327. Tests failed: 0.

Testing transform_matrix() parameter pseudocount ...
Test # 327: Expected error: type(pseudocount) = <class 'NoneType'> must be a number
Test # 328: Expected error: type(pseudocount) = <class 'str'> must be a number
Test # 329: Expected error: pseudocount=-1 must be >= 0
Test # 330: Expected success.
Test # 331: Expected success.
Test # 332: Expected success.
Tests passed: 333. Tests failed: 0.

Testing sequence_to_matrix() parameter seq ...
Test # 333: Expected error: type(seq) = <class 'NoneType'> must be of type str
Test # 334: Expected error: type(seq) = <class 'int'> must be of type str
Test # 335: Expected error: type(seq) = <class 'bool'> must be of type str
Test # 336: Expected success.
Test # 337: Expected success.
Test # 338: Expected success.
Tests passed: 339. Tests failed: 0.

Testing sequence_to_matrix() parameter cols ...
Test # 339: Expected error: cols = %s must be None or a string, set, list, or np.ndarray
Test # 340: Expected error: cols = %s must be None or a string, set, list, or np.ndarray
Test # 341: Expected success.
Test # 342: Expected success.
Tests passed: 343. Tests failed: 0.

Testing sequence_to_matrix() parameter alphabet ...
Test # 343: Expected error: alphabet = 0; must be in ['dna', 'rna', 'protein'].
Test # 344: Expected error: alphabet = True; must be in ['dna', 'rna', 'protein'].
Test # 345: Expected error: alphabet = xxx; must be in ['dna', 'rna', 'protein'].
Test # 346: Expected success.
Test # 347: Expected success.
Tests passed: 348. Tests failed: 0.

Testing sequence_to_matrix() parameter alphabet ...
Test # 348: Expected success.
Tests passed: 349. Tests failed: 0.

Testing sequence_to_matrix() parameter alphabet ...
Test # 349: Expected success.
Tests passed: 350. Tests failed: 0.

Testing sequence_to_matrix() parameter is_iupac ...
Test # 350: Expected error: type(is_iupac) = <class 'int'>; must be bool.
Test # 351: Expected error: type(is_iupac) = <class 'int'>; must be bool.
Test # 352: Expected error: type(is_iupac) = <class 'str'>; must be bool.
Test # 353: Expected error: type(is_iupac) = <class 'str'>; must be bool.
Test # 354: Expected error: type(is_iupac) = <class 'int'>; must be bool.
Test # 355: Expected success.
Test # 356: Expected success.
Tests passed: 357. Tests failed: 0.

Testing sequence_to_matrix() parameter to_type ...
Test # 357: Expected error: invalid to_type=0; to_type must be in {'probability', 'weight', 'information'}
Test # 358: Expected error: invalid to_type=True; to_type must be in {'probability', 'weight', 'information'}
Test # 359: Expected error: invalid to_type=xxx; to_type must be in {'probability', 'weight', 'information'}
Test # 360: Expected success.
Test # 361: Expected success.
Test # 362: Expected success.
Tests passed: 363. Tests failed: 0.

Testing sequence_to_matrix() parameter center_weights ...
Test # 363: Expected error: type(center_weights) = <class 'int'>; must be bool.
Test # 364: Expected error: type(center_weights) = <class 'int'>; must be bool.
Test # 365: Expected error: type(center_weights) = <class 'str'>; must be bool.
Test # 366: Expected error: type(center_weights) = <class 'str'>; must be bool.
Test # 367: Expected error: type(center_weights) = <class 'int'>; must be bool.
Test # 368: Expected success.
Test # 369: Expected success.
Tests passed: 370. Tests failed: 0.

Testing alignment_to_matrix() parameter sequences ...
Test # 370: Expected error: sequences must be a list, tuple, np.ndarray, or pd.Series.
Test # 371: Expected error: sequences must be a list, tuple, np.ndarray, or pd.Series.
Test # 372: Expected error: all elements of sequences must have the same length.
Test # 373: Expected success.
Test # 374: Expected success.
Tests passed: 375. Tests failed: 0.

Testing alignment_to_matrix() parameter counts ...
Test # 375: Expected error: counts must be None or a list, tuple, np.ndarray, or pd.Series.
Test # 376: Expected error: counts must be None or a list, tuple, np.ndarray, or pd.Series.
Test # 377: Expected error: counts must be None or a list, tuple, np.ndarray, or pd.Series.
Test # 378: Expected success.
Tests passed: 379. Tests failed: 0.

Testing alignment_to_matrix() parameter to_type ...
Test # 379: Expected error: to_type=0; must be in {'probability', 'weight', 'counts', 'information'}
Test # 380: Expected error: to_type=True; must be in {'probability', 'weight', 'counts', 'information'}
Test # 381: Expected error: to_type=xxx; must be in {'probability', 'weight', 'counts', 'information'}
Test # 382: Expected success.
Test # 383: Expected success.
Test # 384: Expected success.
Test # 385: Expected success.
Tests passed: 386. Tests failed: 0.

Testing alignment_to_matrix() parameter background ...
Test # 386: Expected error: type(background) = <class 'int'> must be None or array-like or a dataframe.
Test # 387: Expected error: type(background) = <class 'str'> must be None or array-like or a dataframe.
Test # 388: Expected success.
Test # 389: Expected success.
Tests passed: 390. Tests failed: 0.

Testing alignment_to_matrix() parameter characters_to_ignore ...
Test # 390: Expected error: type(seq) = <class 'int'> must be of type str
Test # 391: Expected error: type(seq) = <class 'float'> must be of type str
Test # 392: Expected error: type(seq) = <class 'bool'> must be of type str
Test # 393: Expected error: type(seq) = <class 'NoneType'> must be of type str
Test # 394: Expected success.
Test # 395: Expected success.
Test # 396: Expected success.
Tests passed: 397. Tests failed: 0.

Testing alignment_to_matrix() parameter center_weights ...
Test # 397: Expected error: type(center_weights) = <class 'int'>; must be bool.
Test # 398: Expected error: type(center_weights) = <class 'int'>; must be bool.
Test # 399: Expected error: type(center_weights) = <class 'str'>; must be bool.
Test # 400: Expected error: type(center_weights) = <class 'str'>; must be bool.
Test # 401: Expected error: type(center_weights) = <class 'int'>; must be bool.
Test # 402: Expected success.
Test # 403: Expected success.
Tests passed: 404. Tests failed: 0.

Testing alignment_to_matrix() parameter pseudocount ...
Test # 404: Expected error: type(pseudocount) = <class 'NoneType'> must be a number
Test # 405: Expected error: type(pseudocount) = <class 'str'> must be a number
Test # 406: Expected error: pseudocount=-1 must be >= 0
Test # 407: Expected success.
Test # 408: Expected success.
Test # 409: Expected success.
Tests passed: 410. Tests failed: 0.

Testing saliency_to_matrix() parameter seq ...
Test # 410: Expected error: length of seq and values list must be equal.
Test # 411: Expected error: length of seq and values list must be equal.
Test # 412: Expected error: length of seq and values list must be equal.
Test # 413: Expected success.
Tests passed: 414. Tests failed: 0.

Testing saliency_to_matrix() parameter values ...
Test # 414: Expected error: type(values) = <class 'NoneType'> must be of type list
Test # 415: Expected error: type(values) = <class 'str'> must be of type list
Test # 416: Expected error: type(values) = <class 'int'> must be of type list
Test # 417: Expected success.
Tests passed: 418. Tests failed: 0.

Testing saliency_to_matrix() parameter cols ...
Test # 418: Expected error: cols = %s must be None or a string, set, list, or np.ndarray
Test # 419: Expected error: length of set of unique characters must be equal for "cols " and "seq"
Test # 420: Expected success.
Test # 421: Expected success.
Tests passed: 422. Tests failed: 0.

Testing saliency_to_matrix() parameter alphabet ...
Test # 422: Expected error: alphabet = 0; must be in ['dna', 'rna', 'protein'].
Test # 423: Expected error: alphabet = True; must be in ['dna', 'rna', 'protein'].
Test # 424: Expected error: alphabet = xxx; must be in ['dna', 'rna', 'protein'].
Test # 425: Expected success.
Test # 426: Expected success.
Tests passed: 427. Tests failed: 0.

Testing Glyph() parameter p ...
Test # 427: Expected success.
Test # 428: Expected success.
Test # 429: Expected success.
Test # 430: Expected success.
Tests passed: 431. Tests failed: 0.

Testing Glyph() parameter c ...
Test # 431: Expected error: type(c) = <class 'int'>; must be of type str 
Test # 432: Expected error: type(c) = <class 'float'>; must be of type str 
Test # 433: Expected error: type(c) = <class 'NoneType'>; must be of type str 
Test # 434: Expected success.
Test # 435: Expected success.
Test # 436: Expected success.
Tests passed: 437. Tests failed: 0.

Testing Glyph() parameter floor ...
Test # 437: Expected error: type(floor) = <class 'str'> must be a number
Test # 438: Expected error: must have floor <= ceiling. Currently, floor=2.000000, ceiling=1.000000
Test # 439: Expected error: type(floor) = <class 'NoneType'> must be a number
Test # 440: Expected success.
Test # 441: Expected success.
Test # 442: Expected success.
Tests passed: 443. Tests failed: 0.

Testing Glyph() parameter ceiling ...
Test # 443: Expected error: type(ceiling) = <class 'str'> must be a number
Test # 444: Expected error: must have floor <= ceiling. Currently, floor=0.000000, ceiling=-1.000000
Test # 445: Expected error: type(ceiling) = <class 'NoneType'> must be a number
Test # 446: Expected success.
Test # 447: Expected success.
Test # 448: Expected success.
Tests passed: 449. Tests failed: 0.

Testing Glyph() parameter ax ...
Test # 449: Expected error: ax must be either a matplotlib Axes object or None.
Test # 450: Expected error: ax must be either a matplotlib Axes object or None.
Test # 451: Expected success.
Test # 452: Expected success.
Tests passed: 453. Tests failed: 0.

Testing Glyph() parameter width ...
Test # 453: Expected error: type(width) = <class 'str'>; must be of type float or int 
Test # 454: Expected error: width = -1 must be > 0 
Test # 455: Expected success.
Test # 456: Expected success.
Test # 457: Expected success.
Tests passed: 458. Tests failed: 0.

Testing Glyph() parameter vpad ...
Test # 458: Expected error: type(vpad) = <class 'str'>; must be of type float or int 
Test # 459: Expected error: vpad = -1 must be >= 0 and < 1 
Test # 460: Expected error: type(vpad) = <class 'NoneType'>; must be of type float or int 
Test # 461: Expected error: vpad = 1 must be >= 0 and < 1 
Test # 462: Expected success.
Test # 463: Expected success.
Test # 464: Expected success.
Tests passed: 465. Tests failed: 0.

Testing Glyph() parameter font_name ...
Test # 465: Expected error: type(font_name) = <class 'int'> must be of type str
Test # 466: Expected success.
Tests passed: 467. Tests failed: 0.

Testing Glyph() parameter font_weight ...
Test # 467: Expected error: font_weight must be in range [0,1000]
Test # 468: Expected error: font_weight must be one of ['ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black']
Test # 469: Expected success.
Test # 470: Expected success.
Test # 471: Expected success.
Tests passed: 472. Tests failed: 0.

Testing Glyph() parameter color ...
Test # 472: Expected error: type(color_spec) = <class 'int'> is invalid.
Test # 473: Expected error: invalid choice: color_spec=xxx
Test # 474: Expected success.
Test # 475: Expected success.
Test # 476: Expected success.
Test # 477: Expected success.
Tests passed: 478. Tests failed: 0.

Testing Glyph() parameter edgecolor ...
Test # 478: Expected error: type(color_spec) = <class 'int'> is invalid.
Test # 479: Expected error: invalid choice: color_spec=xxx
Test # 480: Expected success.
Test # 481: Expected success.
Test # 482: Expected success.
Test # 483: Expected success.
Tests passed: 484. Tests failed: 0.

Testing Glyph() parameter edgewidth ...
Test # 484: Expected error: type(edgewidth) = <class 'str'> must be a number
Test # 485: Expected error:  edgewidth must be >= 0; is -1.000000
Test # 486: Expected error: type(edgewidth) = <class 'NoneType'> must be a number
Test # 487: Expected success.
Test # 488: Expected success.
Test # 489: Expected success.
Tests passed: 490. Tests failed: 0.

Testing Glyph() parameter dont_stretch_more_than ...
Test # 490: Expected error: type(dont_stretch_more_than) = <class 'int'>; must be of type str 
Test # 491: Expected error: type(dont_stretch_more_than) = <class 'NoneType'>; must be of type str 
Test # 492: Expected success.
Test # 493: Expected success.
Tests passed: 494. Tests failed: 0.

Testing Glyph() parameter flip ...
Test # 494: Expected error: type(flip) = <class 'int'>; must be of type bool 
Test # 495: Expected error: type(flip) = <class 'int'>; must be of type bool 
Test # 496: Expected error: type(flip) = <class 'str'>; must be of type bool 
Test # 497: Expected error: type(flip) = <class 'str'>; must be of type bool 
Test # 498: Expected error: type(flip) = <class 'int'>; must be of type bool 
Test # 499: Expected success.
Test # 500: Expected success.
Tests passed: 501. Tests failed: 0.

Testing Glyph() parameter mirror ...
Test # 501: Expected error: type(mirror) = <class 'int'>; must be of type bool 
Test # 502: Expected error: type(mirror) = <class 'int'>; must be of type bool 
Test # 503: Expected error: type(mirror) = <class 'str'>; must be of type bool 
Test # 504: Expected error: type(mirror) = <class 'str'>; must be of type bool 
Test # 505: Expected error: type(mirror) = <class 'int'>; must be of type bool 
Test # 506: Expected success.
Test # 507: Expected success.
Tests passed: 508. Tests failed: 0.

Testing Glyph() parameter zorder ...
Test # 508: Expected error: type(zorder) = <class 'str'>; must be of type float or int 
Test # 509: Expected success.
Test # 510: Expected success.
Test # 511: Expected success.
Test # 512: Expected success.
Tests passed: 513. Tests failed: 0.

Testing Glyph() parameter alpha ...
Test # 513: Expected error: alpha must be between 0.0 and 1.0 (inclusive)
Test # 514: Expected error: alpha must be between 0.0 and 1.0 (inclusive)
Test # 515: Expected error: type(alpha) = <class 'str'> must be a float or int
Test # 516: Expected success.
Test # 517: Expected success.
Test # 518: Expected success.
Tests passed: 519. Tests failed: 0.

Testing Glyph() parameter figsize ...
Test # 519: Expected error: type(figsize) = <class 'str'>; figsize must be array-like.
Test # 520: Expected error: all elements of figsize array must be numbers > 0.
Test # 521: Expected error: figsize must have length two.
Test # 522: Expected error: all elements of figsize array must be numbers > 0.
Test # 523: Expected success.
Test # 524: Expected success.
Tests passed: 525. Tests failed: 0.

Testing get_example_matrix() parameter name ...
Test # 525: Expected error: Matrix "wrong argument" not recognized. Please choose from: 
'crp_counts_matrix'
'ww_counts_matrix'
'ars_enrichment_matrix'
'nn_saliency_matrix'
'ww_information_matrix'
'ss_probability_matrix'
'crp_energy_matrix'
'logomaker_logo_matrix'
Test # 526: Expected error: Matrix "-1" not recognized. Please choose from: 
'crp_counts_matrix'
'ww_counts_matrix'
'ars_enrichment_matrix'
'nn_saliency_matrix'
'ww_information_matrix'
'ss_probability_matrix'
'crp_energy_matrix'
'logomaker_logo_matrix'
Test # 527: Expected success.
Test # 528: Expected success.
Tests passed: 529. Tests failed: 0.

Testing get_example_matrix() parameter print_description ...
Test # 529: Expected error: type(print_description) = <class 'int'>; must be of type bool 
Test # 530: Expected error: type(print_description) = <class 'int'>; must be of type bool 
Test # 531: Expected error: type(print_description) = <class 'str'>; must be of type bool 
Test # 532: Expected error: type(print_description) = <class 'str'>; must be of type bool 
Test # 533: Expected error: type(print_description) = <class 'int'>; must be of type bool 
Test # 534: Expected success.
Test # 535: Description of example matrix "crp_energy_matrix":
# 
# CRP energy matrix from Kinney et al. (2010).
# Matrix values are in units of kcal/mol.
# 
# References
# 
# Kinney JB et al. (2010) Using deep sequencing to characterize the
# biophysical mechanism of a transcriptional regulatory sequence.
# Proc Natl Acad Sci USA. 107(20):9158–63.
# 

Expected success.
Tests passed: 536. Tests failed: 0.

Testing open_example_datafile() parameter name ...
Test # 536: Expected error: Matrix "wrong argument" not recognized. Please choose from: 
'ars_sequences.txt.gz'
'ss_sequences.txt'
'crp_sites.fa'
'ars_wt_sequence.txt'
'nn_saliency_values.txt'
'ww_sequences.fa'
Test # 537: Expected error: Matrix "-1" not recognized. Please choose from: 
'ars_sequences.txt.gz'
'ss_sequences.txt'
'crp_sites.fa'
'ars_wt_sequence.txt'
'nn_saliency_values.txt'
'ww_sequences.fa'
Test # 538: Expected success.
Test # 539: Expected success.
Tests passed: 540. Tests failed: 0.

Testing open_example_datafile() parameter print_description ...
Test # 540: Expected error: type(print_description) = <class 'int'>; must be of type bool 
Test # 541: Expected error: type(print_description) = <class 'int'>; must be of type bool 
Test # 542: Expected error: type(print_description) = <class 'str'>; must be of type bool 
Test # 543: Expected error: type(print_description) = <class 'str'>; must be of type bool 
Test # 544: Expected error: type(print_description) = <class 'int'>; must be of type bool 
Test # 545: Expected success.
Test # 546: Description of example matrix "nn_saliency_values.txt":
# 
# Saliency values illustrated in Figure 1F.
# Data are from Figure 1D of Janganathan et al. (2019),
# and were kindly provided by Kyle Farh and Kishore Jaganathan.
# 
# References:
# 
# Jaganathan K et al. (2019) Predicting Splicing from Primary Sequence with
# Deep Learning. Cell. 176(3):535–548.e24.
# 

Expected success.
Tests passed: 547. Tests failed: 0.

